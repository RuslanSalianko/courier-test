/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CouriersImport } from './routes/couriers'
import { Route as IndexImport } from './routes/index'
import { Route as OrdersIndexImport } from './routes/orders/index'
import { Route as SettingsIdImport } from './routes/settings.$id'
import { Route as OrdersIdImport } from './routes/orders/$id'
import { Route as OrderIdImport } from './routes/order.$id'

// Create/Update Routes

const CouriersRoute = CouriersImport.update({
  id: '/couriers',
  path: '/couriers',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrdersIndexRoute = OrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIdRoute = SettingsIdImport.update({
  id: '/settings/$id',
  path: '/settings/$id',
  getParentRoute: () => rootRoute,
} as any)

const OrdersIdRoute = OrdersIdImport.update({
  id: '/orders/$id',
  path: '/orders/$id',
  getParentRoute: () => rootRoute,
} as any)

const OrderIdRoute = OrderIdImport.update({
  id: '/order/$id',
  path: '/order/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/couriers': {
      id: '/couriers'
      path: '/couriers'
      fullPath: '/couriers'
      preLoaderRoute: typeof CouriersImport
      parentRoute: typeof rootRoute
    }
    '/order/$id': {
      id: '/order/$id'
      path: '/order/$id'
      fullPath: '/order/$id'
      preLoaderRoute: typeof OrderIdImport
      parentRoute: typeof rootRoute
    }
    '/orders/$id': {
      id: '/orders/$id'
      path: '/orders/$id'
      fullPath: '/orders/$id'
      preLoaderRoute: typeof OrdersIdImport
      parentRoute: typeof rootRoute
    }
    '/settings/$id': {
      id: '/settings/$id'
      path: '/settings/$id'
      fullPath: '/settings/$id'
      preLoaderRoute: typeof SettingsIdImport
      parentRoute: typeof rootRoute
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/couriers': typeof CouriersRoute
  '/order/$id': typeof OrderIdRoute
  '/orders/$id': typeof OrdersIdRoute
  '/settings/$id': typeof SettingsIdRoute
  '/orders': typeof OrdersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/couriers': typeof CouriersRoute
  '/order/$id': typeof OrderIdRoute
  '/orders/$id': typeof OrdersIdRoute
  '/settings/$id': typeof SettingsIdRoute
  '/orders': typeof OrdersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/couriers': typeof CouriersRoute
  '/order/$id': typeof OrderIdRoute
  '/orders/$id': typeof OrdersIdRoute
  '/settings/$id': typeof SettingsIdRoute
  '/orders/': typeof OrdersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/couriers'
    | '/order/$id'
    | '/orders/$id'
    | '/settings/$id'
    | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/couriers'
    | '/order/$id'
    | '/orders/$id'
    | '/settings/$id'
    | '/orders'
  id:
    | '__root__'
    | '/'
    | '/couriers'
    | '/order/$id'
    | '/orders/$id'
    | '/settings/$id'
    | '/orders/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CouriersRoute: typeof CouriersRoute
  OrderIdRoute: typeof OrderIdRoute
  OrdersIdRoute: typeof OrdersIdRoute
  SettingsIdRoute: typeof SettingsIdRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CouriersRoute: CouriersRoute,
  OrderIdRoute: OrderIdRoute,
  OrdersIdRoute: OrdersIdRoute,
  SettingsIdRoute: SettingsIdRoute,
  OrdersIndexRoute: OrdersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/couriers",
        "/order/$id",
        "/orders/$id",
        "/settings/$id",
        "/orders/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/couriers": {
      "filePath": "couriers.tsx"
    },
    "/order/$id": {
      "filePath": "order.$id.tsx"
    },
    "/orders/$id": {
      "filePath": "orders/$id.tsx"
    },
    "/settings/$id": {
      "filePath": "settings.$id.tsx"
    },
    "/orders/": {
      "filePath": "orders/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
